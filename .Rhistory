knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
library(tidyverse)
library(tidyverse)
library(haven)
library(readr)
library(tidyverse)
library(haven)
library(readr)
library(dplyr)
library(magrittr) #to use piping %>%
library(class) #knn()
library(MASS) #lda()
library(splines) #bs() ns()
library(cowplot) #plot_grid()
library(psych) #describeBy()
#tree based methods
library(rpart)
library(rpart.plot)
library(randomForest)
library(pROC) #ROC curve
library(caret) #bagging,  boosting, rf
library(caret) #bagging,  boosting, rf
#datasets
library(DAAG) #elastic
library(mice) #boys
library(caret) #bagging,  boosting, rf
#datasets
library(DAAG) #elastic
library(mice) #boys
library(MASS) #Boston & Default
sleepdata <- read.csv(url("https://www.kaggle.com/datasets/uom190346a/sleep-health-and-lifestyle-dataset"))
View(sleepdata)
df <- read.csv('data/Sleep_health_and_lifestyle_dataset.csv')
View(df)
sleepdata <- read.csv('data/Sleep_health_and_lifestyle_dataset.csv')
View(sleepdata)
#summary of the data
summary(sleepdata)
#visualize the data
plot(sleepdata)
#check for the most important variables
describeBy(sleepdata$Sleep_Quality, group = sleepdata$Gender)
describeBy(sleepdata$Sleep_Quality, group = sleepdata$Age)
describeBy(sleepdata$Sleep_Quality, group = sleepdata$Occupation)
describeBy(sleepdata$Sleep_Quality, group = sleepdata$Physical_Activity)
describeBy(sleepdata$Sleep_Quality, group = sleepdata$Stress)
describeBy(sleepdata$Sleep_Quality, group = sleepdata$BMI_Category)
md.pattern(sleepdata)
#check how many unique values of occupation, to see if it makes sense to convert to factor, or if there are too many unique values
unique(sleepdata$Occupation)
sleepdata %<>%
mutate(Gender   = as.factor(Gender),
Occupation = as.factor(Occupation),
BMI.Category = as.factor(BMI.Category)) %>%
select(-Person.ID)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
library(tidyverse)
library(tidyverse)
library(readr)
library(dplyr)
library(magrittr)
library(mice)
md.pattern(sleepdata)
#check how many unique values of occupation, to see if it makes sense to convert to factor, or if there are too many unique values
unique(sleepdata$Occupation)
sleepdata %<>%
mutate(Gender   = as.factor(Gender),
Occupation = as.factor(Occupation),
BMI.Category = as.factor(BMI.Category)) %>%
select(-Person.ID)
# use ggplot2 to plot the data of sleep quality compared to sleep duration
ggplot(sleepdata, aes(x=Sleep.Quality, y=Sleep.Duration)) + geom_point() + geom_smooth(method=lm) + labs(title="Sleep quality compared to sleep duration", x="Sleep quality", y="Sleep duration")
# use ggplot2 to plot the data of sleep quality compared to sleep duration
plot_sleepdata <- sleepdata %>%
ggplot(sleepdata, aes(x=Sleep.Quality, y=Sleep.Duration)) +
geom_point() +
geom_smooth(method=lm) +
theme_minimal +
labs(title="Sleep quality compared to sleep duration", x="Sleep quality", y="Sleep duration")
# use ggplot2 to plot the data of sleep quality compared to sleep duration
plot_sleepdata <- sleepdata %>%
ggplot(aes(x=Sleep.Quality, y=Sleep.Duration)) +
geom_point() +
theme_minimal +
labs(title="Sleep quality compared to sleep duration", x="Sleep quality", y="Sleep duration")
# use ggplot2 to plot the data of sleep quality compared to sleep duration
plot_sleepdata <- sleepdata %>%
ggplot(aes(x=Quality.of.Sleep, y=Sleep.Duration)) +
geom_point() +
theme_minimal +
labs(title="Sleep quality compared to sleep duration", x="Sleep quality", y="Sleep duration")
# use ggplot2 to plot the data of sleep quality compared to sleep duration
plot_sleepdata <- sleepdata %>%
ggplot(aes(x=Quality.of.Sleep, y=Sleep.Duration)) +
geom_point() +
theme_minimal() +
labs(title="Sleep quality compared to sleep duration", x="Sleep quality", y="Sleep duration")
# use ggplot2 to plot the data of sleep quality compared to sleep duration
plot_sleepdata <- sleepdata %>%
ggplot(aes(x=Quality.of.Sleep, y=Sleep.Duration)) +
geom_point() +
theme_minimal() +
labs(title="Sleep quality compared to sleep duration", x="Sleep quality", y="Sleep duration")
plot_sleepdata
plot_sleepdata
# use ggplot2 to plot the data of sleep quality compared to sleep duration
plot_sleepdata <- sleepdata %>%
ggplot(aes(x=Quality.of.Sleep, y=Sleep.Duration)) +
geom_point() +
theme_minimal() +
geom_smooth() +
labs(title="Sleep quality compared to sleep duration", x="Sleep quality", y="Sleep duration")
plot_sleepdata
# use ggplot2 to plot the data of sleep quality compared to sleep duration
plot_sleepdata <- sleepdata %>%
ggplot(aes(x=Quality.of.Sleep, y=Sleep.Duration)) +
geom_line() +
theme_minimal() +
geom_smooth() +
labs(title="Sleep quality compared to sleep duration", x="Sleep quality", y="Sleep duration")
plot_sleepdata
# use ggplot2 to plot the data of sleep quality compared to sleep duration
plot_sleepdata <- sleepdata %>%
ggplot(aes(x=Quality.of.Sleep, y=Sleep.Duration)) +
geom_point() +
theme_minimal() +
geom_smooth() +
labs(title="Sleep quality compared to sleep duration", x="Sleep quality", y="Sleep duration")
plot_sleepdata
# use ggplot2 to plot the data of sleep quality compared to sleep duration
plot_sleepdata <- sleepdata %>%
ggplot(aes(x=Quality.of.Sleep, y=Sleep.Duration)) +
geom_bar() +
theme_minimal() +
geom_smooth() +
labs(title="Sleep quality compared to sleep duration", x="Sleep quality", y="Sleep duration")
plot_sleepdata
# use ggplot2 to plot the data of sleep quality compared to sleep duration
plot_sleepdata <- sleepdata %>%
ggplot(aes(x=Quality.of.Sleep, y=Sleep.Duration)) +
geom_bar() +
theme_minimal() +
geom_smooth() +
labs(title="Sleep quality compared to sleep duration", x="Sleep quality", y="Sleep duration")
plot_sleepdata
# use ggplot2 to plot the data of sleep quality compared to sleep duration
plot_sleepdata <- sleepdata %>%
ggplot(aes(x=Quality.of.Sleep, y=Sleep.Duration)) +
geom_boxplot() +
theme_minimal() +
geom_smooth() +
labs(title="Sleep quality compared to sleep duration", x="Sleep quality", y="Sleep duration")
plot_sleepdata
# use ggplot2 to plot the data of sleep quality compared to sleep duration
plot_sleepdata <- sleepdata %>%
ggplot(aes(x=Quality.of.Sleep, y=Sleep.Duration)) +
geom_point(position = jitter) +
theme_minimal() +
geom_smooth() +
labs(title="Sleep quality compared to sleep duration", x="Sleep quality", y="Sleep duration")
plot_sleepdata
# use ggplot2 to plot the data of sleep quality compared to sleep duration
plot_sleepdata <- sleepdata %>%
ggplot(aes(x=Quality.of.Sleep, y=Sleep.Duration)) +
geom_point(position = jitter) +
theme_minimal() +
geom_smooth() +
labs(title="Sleep quality compared to sleep duration", x="Sleep quality", y="Sleep duration")
plot_sleepdata
# use ggplot2 to plot the data of sleep quality compared to sleep duration
plot_sleepdata <- sleepdata %>%
ggplot(aes(x=Quality.of.Sleep, y=Sleep.Duration)) +
geom_point(position = jitter) +
theme_minimal() +
geom_smooth() +
labs(title="Sleep quality compared to sleep duration", x="Sleep quality", y="Sleep duration")
# use ggplot2 to plot the data of sleep quality compared to sleep duration
plot_sleepdata <- sleepdata %>%
ggplot(aes(x=Quality.of.Sleep, y=Sleep.Duration)) +
geom_point(position = "jitter") +
theme_minimal() +
geom_smooth() +
labs(title="Sleep quality compared to sleep duration", x="Sleep quality", y="Sleep duration")
plot_sleepdata
# create a boxplot of the sleepquality per sleep duration.
plot_sleepdata2 <- sleepdata %>% mutate(
Quality.of.Sleep = as.factor(Quality.of.Sleep)
) %>%
ggplot(aes(x=Quality.of.Sleep, y=Sleep.Duration)) +
geom_boxplot() +
theme_minimal() +
labs(title="Sleep quality compared to sleep duration", x="Sleep quality", y="Sleep duration")
plot_sleepdata2
# test whether the reason behind the high variety in sleep duration when the sleep quality is 7 is that most people filled in 7 as sleep quality.
sleepdata %>%
filter(Quality.of.Sleep == 7) %>%
group_by(Quality.of.Sleep) %>%
summarise(n = n())
# test whether the reason behind the high variety in sleep duration when the sleep quality is 7 is that most people filled in 7 as sleep quality.
sleepdata %>%
filter(Quality.of.Sleep == n) %>%
group_by(Quality.of.Sleep) %>%
summarise(n = n())
# test whether the reason behind the high variety in sleep duration when the sleep quality is 7 is that most people filled in 7 as sleep quality.
sleepdata %>%
group_by(Quality.of.Sleep) %>%
summarise(n = n())
# test whether the reason behind the high variety in sleep duration when the sleep quality is 7 is that most people filled in 7 as sleep quality.
sleepdata %>%
group_by(Quality.of.Sleep) %>%
summarise(rows = n())
n
# test whether the reason behind the high variety in sleep duration when the sleep quality is 7 is that most people filled in 7 as sleep quality.
sleepdata %>%
group_by(Quality.of.Sleep) %>%
summarise(n = n())
correlation_matrix <- cor(your_data_frame)
correlation_matrix <- cor(sleepdata)
correlation_matrix <- sleepdata %>%
cor(Quality.of.Sleep)
correlation_matrix <- sleepdata %>%
cor(Quality.of.Sleep)
correlation_matrix <- sleepdata %>%
cor(sleepdata, Quality.of.Sleep)
correlation_matrix <- sleepdata %$%
cor(Quality.of.Sleep)
correlation_matrix <- sleepdata %$%
cor(Quality.of.Sleep)
correlation_matrix <- sleepdata %>%
cor(Quality.of.Sleep, Sleep.Duration, Physical.Activity, Stress, BMI, Blood.Pressure, Heart.Rate, Steps)
correlation_matrix <- sleepdata %>%
cor(data = sleepdata, Quality.of.Sleep, Sleep.Duration, Physical.Activity, Stress, BMI, Blood.Pressure, Heart.Rate, Steps)
correlation_matrix <- sleepdata %>%
cor(sleepdata$Quality.of.Sleep, sleepdata$Sleep.Duration, sleepdata$Physical.Activity, sleepdata$Stress, sleepdata$BMI, sleepdata$Blood.Pressure, sleepdata$Heart.Rate, sleepdata$Steps)
correlation_matrix <- sleepdata %>%
cor(sleepdata$Quality.of.Sleep, sleepdata$Sleep.Duration, sleepdata$Physical.Activity.Level, sleepdata$Stress.Level, sleepdata$BMI.Category, sleepdata$Blood.Pressure, sleepdata$Heart.Rate, sleepdata$Daily.Steps)
correlation_matrix <- sleepdata %>%
cor(sleepdata$Quality.of.Sleep, sleepdata$Sleep.Duration, sleepdata$Physical.Activity.Level, sleepdata$Stress.Level, sleepdata$BMI.Category, sleepdata$Blood.Pressure, sleepdata$Heart.Rate, sleepdata$Daily.Steps)
correlation_matrix <- sleepdata %>%
cor(sleepdata$Quality.of.Sleep, sleepdata$Sleep.Duration, sleepdata$Physical.Activity.Level)
correlation_matrix <- sleepdata %>%
cor(sleepdata$Quality.of.Sleep, sleepdata$Sleep.Duration, sleepdata$Physical.Activity.Level)
# use ggplot2 to plot the data of sleep quality compared to sleep duration
plot_sleepdata <- sleepdata %>%
ggplot(aes(x=Quality.of.Sleep, y=Sleep.Duration)) +
geom_point(position = "jitter") +
theme_minimal() +
geom_smooth() +
labs(title="Sleep quality compared to sleep duration", x="Sleep quality", y="Sleep duration")
# create a boxplot of the sleep quality per sleep duration.
plot_sleepdata2 <- sleepdata %>% mutate(
Quality.of.Sleep = as.factor(Quality.of.Sleep)
) %>%
ggplot(aes(x=Quality.of.Sleep, y=Sleep.Duration)) +
geom_boxplot() +
theme_minimal() +
labs(title="Sleep quality compared to sleep duration", x="Sleep quality", y="Sleep duration")
ggplot(sleepdata, aes(x = Gender, y = Quality.of.Sleep)) +
geom_boxplot(fill = "lightblue") +
labs(title = "Sleep Quality by Gender", y = "Quality of Sleep")
ggplot(sleepdata, aes(x = Occupation)) +
geom_bar()
sleepdata %>%
group_by(Occupation) %>%
summarise(
median = median(Sleep.Duration),
min = min(Sleep.Duration),
max = max(Sleep.Duration),
mad = mad(Sleep.Duration) # Adding median absolute deviation
)
sleepdata %>%
ggplot(aes(x = BMI.Category, y = Daily.Steps)) +
scale_x_discrete(limits = c("Normal", "Normal Weight", "Overweight", "Obese")) +
geom_boxplot()
#summary of the data
summary(sleepdata)
#check for the most important variables
# use ggplot2 to plot the data of sleep quality compared to sleep duration
plot_sleepdata <- sleepdata %>%
ggplot(aes(x=Quality.of.Sleep, y=Sleep.Duration)) +
geom_point(position = "jitter") +
theme_minimal() +
geom_smooth() +
labs(title="Sleep quality compared to sleep duration", x="Sleep quality", y="Sleep duration")
plot_sleepdata
# create a boxplot of the sleep quality per sleep duration.
plot_sleepdata2 <- sleepdata %>% mutate(
Quality.of.Sleep = as.factor(Quality.of.Sleep)
) %>%
ggplot(aes(x=Quality.of.Sleep, y=Sleep.Duration)) +
geom_boxplot() +
theme_minimal() +
labs(title="Sleep quality compared to sleep duration", x="Sleep quality", y="Sleep duration")
plot_sleepdata2
ggplot(sleepdata, aes(x = Gender, y = Quality.of.Sleep)) +
geom_boxplot(fill = "lightblue") +
labs(title = "Sleep Quality by Gender", y = "Quality of Sleep")
ggplot(sleepdata, aes(x = Occupation)) +
geom_bar()
sleepdata %>%
group_by(Occupation) %>%
summarise(
median = median(Sleep.Duration),
min = min(Sleep.Duration),
max = max(Sleep.Duration),
mad = mad(Sleep.Duration) # Adding median absolute deviation
)
sleepdata %>%
ggplot(aes(x = BMI.Category, y = Daily.Steps)) +
scale_x_discrete(limits = c("Normal", "Normal Weight", "Overweight", "Obese")) +
geom_boxplot()
tree_mod <- rpart(Sleep.Quality ~ ., data = sleepdata)
rpart.plot(tree_mod) #plot tree
library(rpart)
tree_mod <- rpart(Sleep.Quality ~ ., data = sleepdata)
rpart.plot(tree_mod) #plot tree
library(rpart.plot)
tree_mod <- rpart(Sleep.Quality ~ ., data = sleepdata)
rpart.plot(tree_mod) #plot tree
tree_mod <- rpart(Quality.of.Sleep ~ ., data = sleepdata)
rpart.plot(tree_mod) #plot tree
rf_mod <- randomForest(Quality.of.Sleep ~ ., data = sleepdata)
##Random forest
library(randomForest)
rf_mod <- randomForest(Quality.of.Sleep ~ ., data = sleepdata)
rf_mod
importance(rf_mod)
importance <- importance(rf_mod)
tibble(
importance = c(importance),
variable = rownames(importance)
) %>%
ggplot(aes(x = variable, y = importance, fill = variable)) +
geom_bar(stat = "identity")
tibble(
importance = c(importance),
variable = rownames(importance)
) %>%
ggplot(aes(x = variable, y = importance, fill = variable)) +
geom_bar(stat = "identity")
tibble(
importance = c(importance),
variable = rownames(rf_mod)
) %>%
ggplot(aes(x = variable, y = importance, fill = variable)) +
geom_bar(stat = "identity")
tibble(
importance = c(importance),
variable = rownames(importance)
tibble(
tibble(
importance = c(importance),
variable = rownames(importance)
) %>%
ggplot(aes(x = variable, y = importance, fill = variable)) +
geom_bar(stat = "identity")
tibble(
importance = c(importance),
variable = rownames(importance)
) %>%
ggplot(aes(x = variable, y = importance)) +
geom_bar(stat = "identity")
#random forest with caret package
rf_train <- sleepdata %>%
train(Quality.of.Sleep ~ .,
data = sleepdata,
method = 'rf',
trControl = cvcontrol,
importance = TRUE)
#random forest with caret package
library(caret)
#random forest with caret package
library(caret)
rf_train <- sleepdata %>%
train(Quality.of.Sleep ~ .,
data = sleepdata,
method = 'rf',
trControl = cvcontrol,
importance = TRUE)
cvcontrol <- trainControl(method = "repeatedcv",
number = 10,
allowParallel = TRUE)
rf_train <- sleepdata %>%
train(Quality.of.Sleep ~ .,
data = sleepdata,
method = 'rf',
trControl = cvcontrol,
importance = TRUE)
#boosting
gbm_train <- train(Quality.of.Sleep ~ .,
data = sleepdata,
method = "gbm",
verbose = F,
trControl = cvcontrol) #print bag_train, rf_train, gbm_train models to see accuracy
summary(gbm_train) #var importance plot
predictions <- predict(gbm_train)
set.seed(123)
train_indices <- createDataPartition(sleep_data$target_variable, p = 0.8, list = FALSE)
train_indices <- createDataPartition(sleepdata$target_variable, p = 0.8, list = FALSE)
train_indices <- createDataPartition(sleepdata$Quality.of.Sleep, p = 0.8, list = FALSE)
set.seed(123)
train <- sample(1:nrow(sleepdata), 0.75*nrow(sleepdata)) # 75% of the rows for the training set.
train_data <- sleepdata[train,]
test_data <- sleepdata[-train,] #use the other 25% of the rows for the test set.
#EDA
summary(train_data)
# Train a simple linear regression model
simple_model <- lm(Quality.of.Sleep ~ ., data = train)
# Train a simple linear regression model
simple_model <- lm(Quality.of.Sleep ~ ., data = sleepdata)
# Make predictions on the test set
simple_predictions <- predict(simple_model, newdata = test_data)
# Make predictions on the test set
simple_predictions <- predict(simple_model, newdata = test)
# Train a simple linear regression model
simple_model <- lm(Quality.of.Sleep ~ ., data = train_data)
# Make predictions on the test set
simple_predictions <- predict(simple_model, newdata = test_data)
# Make predictions on the test set
simple_predictions <- predict(simple_model, newdata = test_data)
train <- sample(1:nrow(sleepdata), 0.75*nrow(sleepdata)) # 75% of the rows for the training set.
train_data <- sleepdata[train,]
test_data <- sleepdata[-train,] #use the other 25% of the rows for the test set.
#EDA
summary(train_data)
# Train a simple linear regression model
simple_model <- lm(Quality.of.Sleep ~ ., data = train_data)
# Make predictions on the test set
simple_predictions <- predict(simple_model, newdata = test_data)
generate_formulas <- function(p, x_vars, y_var) {
# Input checking
if (p %% 1 != 0)           stop("Input an integer n")
if (p > length(x_vars))    stop("p should be smaller than number of vars")
if (!is.character(x_vars)) stop("x_vars should be a character vector")
if (!is.character(y_var))  stop("y_vars should be character type")
generate_formulas <- function(p, x_vars, y_var) {
# Input checking
if (p %% 1 != 0)           stop("Input an integer n")
if (p > length(x_vars))    stop("p should be smaller than number of vars")
if (!is.character(x_vars)) stop("x_vars should be a character vector")
if (!is.character(y_var))  stop("y_vars should be character type")
# combn generates all combinations, apply turns them into formula strings
apply(combn(x_vars, p), 2, function(vars) {
paste0(y_var, " ~ ", paste(vars, collapse = " + "))
})
}
